{
  "className": "qx.bom.webfonts.Validator",
  "packageName": "qx.bom.webfonts",
  "name": "Validator",
  "superClass": "qx.core.Object",
  "interfaces": [],
  "mixins": [],
  "functionName": null,
  "clazz": {
    "location": {
      "start": {
        "line": 23,
        "column": 0
      },
      "end": {
        "line": 405,
        "column": 3
      }
    },
    "jsdoc": {
      "@description": [
        {
          "name": "@description",
          "body": "***********************************************************************\n\nqooxdoo - the new era of web development\n\nhttp://qooxdoo.org\n\nCopyright:\n2004-2011 1&1 Internet AG, Germany, http://www.1und1.de\n\nLicense:\nMIT: https://opensource.org/licenses/MIT\nSee the LICENSE file in the project's top-level directory for details.\n\n***********************************************************************"
        },
        {
          "name": "@description",
          "body": "Checks whether a given font is available on the document and fires events\naccordingly.\n\nThis class does not need to be disposed, unless you want to abort the validation\nearly"
        }
      ]
    }
  },
  "type": "class",
  "construct": {
    "location": {
      "start": {
        "line": 39,
        "column": 2
      },
      "end": {
        "line": 51,
        "column": 3
      }
    },
    "jsdoc": {
      "@description": [
        {
          "name": "@description",
          "body": "****************************************************************************\nCONSTRUCTOR\n****************************************************************************"
        },
        {
          "name": "@description",
          "body": ""
        }
      ],
      "@param": [
        {
          "name": "@param",
          "body": "fontFamily {String} The name of the font to be verified",
          "paramName": "fontFamily",
          "description": " The name of the font to be verified",
          "type": "String"
        },
        {
          "name": "@param",
          "body": "comparisonString {String?} String to be used to detect whether a font was loaded or not\nwhether the font has loaded properly",
          "paramName": "comparisonString",
          "description": " String to be used to detect whether a font was loaded or not\nwhether the font has loaded properly",
          "optional": true,
          "type": "String"
        }
      ]
    }
  },
  "statics": {
    "COMPARISON_FONTS": {
      "location": {
        "start": {
          "line": 67,
          "column": 4
        },
        "end": {
          "line": 70,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Sets of serif and sans-serif fonts to be used for size comparisons.\nAt least one of these fonts should be present on any system."
          }
        ]
      },
      "type": "variable",
      "access": "public"
    },
    "HELPER_CSS": {
      "location": {
        "start": {
          "line": 76,
          "column": 4
        },
        "end": {
          "line": 88,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Map of common CSS attributes to be used for all  size comparison elements"
          }
        ]
      },
      "type": "variable",
      "access": "public"
    },
    "COMPARISON_STRING": {
      "location": {
        "start": {
          "line": 97,
          "column": 4
        },
        "end": {
          "line": 97,
          "column": 30
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "The string to be used in the size comparison elements. This is the default string\nwhich is used for the {@link #COMPARISON_FONTS} and the font to be validated. It\ncan be overridden for the font to be validated using the {@link #comparisonString}\nproperty."
          }
        ]
      },
      "type": "variable",
      "access": "public"
    },
    "__defaultSizes": {
      "location": {
        "start": {
          "line": 98,
          "column": 4
        },
        "end": {
          "line": 98,
          "column": 25
        }
      },
      "type": "variable",
      "access": "private"
    },
    "__defaultHelpers": {
      "location": {
        "start": {
          "line": 99,
          "column": 4
        },
        "end": {
          "line": 99,
          "column": 27
        }
      },
      "type": "variable",
      "access": "private"
    },
    "removeDefaultHelperElements": {
      "location": {
        "start": {
          "line": 106,
          "column": 4
        },
        "end": {
          "line": 115,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Removes the two common helper elements used for all size comparisons from\nthe DOM"
          }
        ]
      },
      "type": "function",
      "access": "public"
    }
  },
  "properties": {
    "fontFamily": {
      "location": {
        "start": {
          "line": 131,
          "column": 4
        },
        "end": {
          "line": 136,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "The font-family this validator should check"
          }
        ]
      },
      "name": "fontFamily",
      "propertyType": "new",
      "apply": "_applyFontFamily",
      "nullable": true,
      "allowNull": true
    },
    "comparisonString": {
      "location": {
        "start": {
          "line": 141,
          "column": 4
        },
        "end": {
          "line": 145,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Comparison string used to check whether the font has loaded or not."
          }
        ]
      },
      "name": "comparisonString",
      "propertyType": "new",
      "nullable": true,
      "allowNull": true
    },
    "timeout": {
      "location": {
        "start": {
          "line": 151,
          "column": 4
        },
        "end": {
          "line": 155,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Time in milliseconds from the beginning of the check until it is assumed\nthat a font is not available"
          }
        ]
      },
      "name": "timeout",
      "propertyType": "new",
      "init": 5000,
      "check": "Integer",
      "defaultValue": 5000
    },
    "qxOwner": {
      "type": "property",
      "name": "qxOwner",
      "abstract": false,
      "mixin": true,
      "access": "public",
      "overriddenFrom": "qx.core.MObjectId"
    },
    "qxObjectId": {
      "type": "property",
      "name": "qxObjectId",
      "abstract": false,
      "mixin": true,
      "access": "public",
      "overriddenFrom": "qx.core.MObjectId"
    }
  },
  "events": {
    "changeStatus": {
      "location": {
        "start": {
          "line": 173,
          "column": 4
        },
        "end": {
          "line": 173,
          "column": 41
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Fired when the status of a web font has been determined. The event data\nis a map with the keys \"family\" (the font-family name) and \"valid\"\n(Boolean)."
          }
        ]
      },
      "name": "changeStatus",
      "type": "qx.event.type.Data"
    }
  },
  "members": {
    "__requestedHelpers": {
      "location": {
        "start": {
          "line": 186,
          "column": 4
        },
        "end": {
          "line": 186,
          "column": 29
        }
      },
      "type": "variable",
      "access": "private"
    },
    "__checkTimer": {
      "location": {
        "start": {
          "line": 187,
          "column": 4
        },
        "end": {
          "line": 187,
          "column": 23
        }
      },
      "type": "variable",
      "access": "private"
    },
    "__checkStarted": {
      "location": {
        "start": {
          "line": 188,
          "column": 4
        },
        "end": {
          "line": 188,
          "column": 25
        }
      },
      "type": "variable",
      "access": "private"
    },
    "validate": {
      "location": {
        "start": {
          "line": 201,
          "column": 4
        },
        "end": {
          "line": 216,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "---------------------------------------------------------------------------\nPUBLIC API\n---------------------------------------------------------------------------"
          },
          {
            "name": "@description",
            "body": "Validates the font"
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "_reset": {
      "location": {
        "start": {
          "line": 229,
          "column": 4
        },
        "end": {
          "line": 238,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "---------------------------------------------------------------------------\nPROTECTED API\n---------------------------------------------------------------------------"
          },
          {
            "name": "@description",
            "body": "Removes the helper elements from the DOM"
          }
        ]
      },
      "type": "function",
      "access": "protected"
    },
    "_isFontValid": {
      "location": {
        "start": {
          "line": 249,
          "column": 4
        },
        "end": {
          "line": 275,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Checks if the font is available by comparing the widths of the elements\nusing the generic fonts to the widths of the elements using the font to\nbe validated"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{Boolean} Whether or not the font caused the elements to differ\nin size",
            "type": "Boolean",
            "description": " Whether or not the font caused the elements to differ\nin size"
          }
        ]
      },
      "type": "function",
      "access": "protected"
    },
    "_getRequestedHelpers": {
      "location": {
        "start": {
          "line": 284,
          "column": 4
        },
        "end": {
          "line": 292,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Creates the two helper elements styled with the font to be checked"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{Map} A map with the keys <pre>sans</pre> and <pre>serif</pre>\nand the created span elements as values",
            "type": "Map",
            "description": " A map with the keys <pre>sans</pre> and <pre>serif</pre>\nand the created span elements as values"
          }
        ]
      },
      "type": "function",
      "access": "protected"
    },
    "_getHelperElement": {
      "location": {
        "start": {
          "line": 304,
          "column": 4
        },
        "end": {
          "line": 321,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Creates a span element with the comparison text (either {@link #COMPARISON_STRING} or\n{@link #comparisonString}) and styled with the default CSS ({@link #HELPER_CSS}) plus\nthe given font-family value and appends it to the DOM"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "fontFamily {String} font-family string",
            "paramName": "fontFamily",
            "description": " font-family string",
            "type": "String"
          },
          {
            "name": "@param",
            "body": "comparisonString {String?} String to be used to detect whether a font was loaded or not",
            "paramName": "comparisonString",
            "description": " String to be used to detect whether a font was loaded or not",
            "optional": true,
            "type": "String"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{Element} the created DOM element",
            "type": "Element",
            "description": " the created DOM element"
          }
        ]
      },
      "type": "function",
      "access": "protected"
    },
    "_applyFontFamily": {
      "location": {
        "start": {
          "line": 325,
          "column": 4
        },
        "end": {
          "line": 330,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "property apply"
          }
        ]
      },
      "type": "function",
      "access": "protected",
      "applyFor": [
        "fontFamily"
      ]
    },
    "__init": {
      "location": {
        "start": {
          "line": 343,
          "column": 4
        },
        "end": {
          "line": 357,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "---------------------------------------------------------------------------\nPRIVATE API\n---------------------------------------------------------------------------"
          },
          {
            "name": "@description",
            "body": "Creates the default helper elements and gets their widths"
          }
        ]
      },
      "type": "function",
      "access": "private"
    },
    "__onTimerInterval": {
      "location": {
        "start": {
          "line": 364,
          "column": 4
        },
        "end": {
          "line": 386,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Triggers helper element size comparison and fires a ({@link #changeStatus})\nevent with the result."
          }
        ]
      },
      "type": "function",
      "access": "private"
    },
    "getQxOwner": {
      "type": "function",
      "name": "getQxOwner",
      "abstract": false,
      "mixin": false,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.core.Object",
      "property": "get",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Gets the (computed) value of the property <code>qxOwner</code>.\n\nFor further details take a look at the property definition: {@link #qxOwner}."
          }
        ],
        "@return": [
          {
            "name": "@return",
            "type": "qx.core.Object",
            "desc": "Returns the value for qxOwner"
          }
        ]
      }
    },
    "setQxOwner": {
      "type": "function",
      "name": "setQxOwner",
      "abstract": false,
      "mixin": false,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.core.Object",
      "property": "set",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Sets the user value of the property <code>qxOwner</code>.\n\nFor further details take a look at the property definition: {@link #qxOwner}."
          }
        ],
        "@param": [
          {
            "name": "@param",
            "type": "qx.core.Object",
            "paramName": "value",
            "desc": "Value for qxOwner"
          }
        ]
      }
    },
    "resetQxOwner": {
      "type": "function",
      "name": "resetQxOwner",
      "abstract": false,
      "mixin": false,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.core.Object",
      "property": "reset"
    },
    "getQxObjectId": {
      "type": "function",
      "name": "getQxObjectId",
      "abstract": false,
      "mixin": false,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.core.Object",
      "property": "get",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Gets the (computed) value of the property <code>qxObjectId</code>.\n\nFor further details take a look at the property definition: {@link #qxObjectId}."
          }
        ],
        "@return": [
          {
            "name": "@return",
            "desc": "Returns the value for qxObjectId"
          }
        ]
      }
    },
    "setQxObjectId": {
      "type": "function",
      "name": "setQxObjectId",
      "abstract": false,
      "mixin": false,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.core.Object",
      "property": "set",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Sets the user value of the property <code>qxObjectId</code>.\n\nFor further details take a look at the property definition: {@link #qxObjectId}."
          }
        ],
        "@param": [
          {
            "name": "@param",
            "paramName": "value",
            "desc": "Value for qxObjectId"
          }
        ]
      }
    },
    "resetQxObjectId": {
      "type": "function",
      "name": "resetQxObjectId",
      "abstract": false,
      "mixin": false,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.core.Object",
      "property": "reset"
    },
    "getFontFamily": {
      "type": "function",
      "name": "getFontFamily",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "get",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Gets the (computed) value of the property <code>fontFamily</code>.\n\nFor further details take a look at the property definition: {@link #fontFamily}."
          }
        ],
        "@return": [
          {
            "name": "@return",
            "type": "any",
            "desc": "Returns the value for fontFamily"
          }
        ]
      }
    },
    "setFontFamily": {
      "type": "function",
      "name": "setFontFamily",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "set",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Sets the user value of the property <code>fontFamily</code>.\n\nFor further details take a look at the property definition: {@link #fontFamily}."
          }
        ],
        "@param": [
          {
            "name": "@param",
            "type": "any",
            "paramName": "value",
            "desc": "Value for fontFamily"
          }
        ]
      }
    },
    "resetFontFamily": {
      "type": "function",
      "name": "resetFontFamily",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "reset",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Resets the user value of the property <code>fontFamily</code>.\n\nThe computed value falls back to the next available value e.g. appearance, init or inheritance value depending on the property configuration and value availability.\n\nFor further details take a look at the property definition: {@link #fontFamily}."
          }
        ]
      }
    },
    "getComparisonString": {
      "type": "function",
      "name": "getComparisonString",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "get",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Gets the (computed) value of the property <code>comparisonString</code>.\n\nFor further details take a look at the property definition: {@link #comparisonString}."
          }
        ],
        "@return": [
          {
            "name": "@return",
            "type": "any",
            "desc": "Returns the value for comparisonString"
          }
        ]
      }
    },
    "setComparisonString": {
      "type": "function",
      "name": "setComparisonString",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "set",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Sets the user value of the property <code>comparisonString</code>.\n\nFor further details take a look at the property definition: {@link #comparisonString}."
          }
        ],
        "@param": [
          {
            "name": "@param",
            "type": "any",
            "paramName": "value",
            "desc": "Value for comparisonString"
          }
        ]
      }
    },
    "resetComparisonString": {
      "type": "function",
      "name": "resetComparisonString",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "reset",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Resets the user value of the property <code>comparisonString</code>.\n\nThe computed value falls back to the next available value e.g. appearance, init or inheritance value depending on the property configuration and value availability.\n\nFor further details take a look at the property definition: {@link #comparisonString}."
          }
        ]
      }
    },
    "getTimeout": {
      "type": "function",
      "name": "getTimeout",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "get",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Gets the (computed) value of the property <code>timeout</code>.\n\nFor further details take a look at the property definition: {@link #timeout}."
          }
        ],
        "@return": [
          {
            "name": "@return",
            "type": "Integer",
            "desc": "Returns the value for timeout"
          }
        ]
      }
    },
    "setTimeout": {
      "type": "function",
      "name": "setTimeout",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "set",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Sets the user value of the property <code>timeout</code>.\n\nFor further details take a look at the property definition: {@link #timeout}."
          }
        ],
        "@param": [
          {
            "name": "@param",
            "type": "Integer",
            "paramName": "value",
            "desc": "Value for timeout"
          }
        ]
      }
    },
    "resetTimeout": {
      "type": "function",
      "name": "resetTimeout",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "reset",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Resets the user value of the property <code>timeout</code>.\n\nThe computed value falls back to the next available value e.g. appearance, init or inheritance value depending on the property configuration and value availability.\n\nFor further details take a look at the property definition: {@link #timeout}."
          }
        ]
      }
    }
  },
  "destruct": {
    "location": {
      "start": {
        "line": 398,
        "column": 2
      },
      "end": {
        "line": 404,
        "column": 3
      }
    },
    "jsdoc": {
      "@description": [
        {
          "name": "@description",
          "body": "****************************************************************************\nDESTRUCTOR\n****************************************************************************"
        }
      ]
    }
  },
  "descendants": []
}