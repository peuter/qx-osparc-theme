{
  "className": "qx.Promise",
  "packageName": "qx",
  "name": "Promise",
  "superClass": "qx.core.Object",
  "interfaces": [],
  "mixins": [],
  "functionName": null,
  "clazz": {
    "location": {
      "start": {
        "line": 59,
        "column": 0
      },
      "end": {
        "line": 1002,
        "column": 3
      }
    },
    "jsdoc": {
      "@description": [
        {
          "name": "@description",
          "body": "***********************************************************************\n\nqooxdoo - the new era of web development\n\nhttp://qooxdoo.org\n\nCopyright:\n2016 Zenesis Limited, http://www.zenesis.com\nBluebirdJS Copyright (c) 2013-2016 Petka Antonov http://bluebirdjs.com/\n\nLicense:\nMIT: https://opensource.org/licenses/MIT\nSee the LICENSE file in the project's top-level directory for details.\n\nAuthors:\nJohn Spackman (john.spackman@zenesis.com)\n\n***********************************************************************"
        },
        {
          "name": "@description",
          "body": "This class adds Promise/A+ support to Qooxdoo, as specified at\nhttps://github.com/promises-aplus/promises-spec and using the Bluebird Promise\nlibrary (http://bluebirdjs.com/) to implement it.  The official Promise/A+ API)\nis mirrored exactly, and a number of extension methods are added with the BluebirdJS\nAPI for inspiration (many/most of the extension functions are taken verbatim).\n\nThere are two ways to bind a 'this' value to callbacks - the first is to\nappend a context method to methods like then(), and the second is to specify\nthe context as the second parameter to the constructor and all callbacks will\nbe bound to that value.\n\nFor example:\n\n<pre class=\"javascript\">\nvar promise = new qx.Promise(myAsyncFunction, this);\npromise.then(function() {\n// 'this' is preserved from the outer scope\n});\n\n// ... is the same as: ...\nvar promise = new qx.Promise(myAsyncFunction);\npromise.then(function() {\n// 'this' is preserved from the outer scope\n}, this);\n</pre>\n\nIf you have an existing qx.Promise and want to bind all callbacks, use the\nbind() method - but note that it returns a new promise:\n\n<pre class=\"javascript\">\nvar promise = someMethodThatReturnsAPromise();\nvar boundPromise = promise.bind(this);\nboundPromise.then(function() {\n// 'this' is preserved from the outer scope\n}, this);\n</pre>"
        }
      ]
    }
  },
  "type": "class",
  "construct": {
    "location": {
      "start": {
        "line": 73,
        "column": 2
      },
      "end": {
        "line": 107,
        "column": 3
      }
    },
    "jsdoc": {
      "@description": [
        {
          "name": "@description",
          "body": "Constructor.\n\nThe promise function is called with two parameters, functions which are to be called\nwhen the promise is fulfilled or rejected respectively.  If you do not provide any\nparameters, the promise can be externally resolved or rejected by calling the\n<code>resolve()</code> or <code>reject()</code> methods."
        }
      ],
      "@param": [
        {
          "name": "@param",
          "body": "fn {Function} the promise function called with <code>(resolve, reject)</code>",
          "paramName": "fn",
          "description": " the promise function called with <code>(resolve, reject)</code>",
          "type": "Function"
        },
        {
          "name": "@param",
          "body": "context {Object?} optional context for all callbacks",
          "paramName": "context",
          "description": " optional context for all callbacks",
          "optional": true,
          "type": "Object"
        }
      ]
    }
  },
  "destruct": {
    "location": {
      "start": {
        "line": 112,
        "column": 2
      },
      "end": {
        "line": 115,
        "column": 3
      }
    },
    "jsdoc": {
      "@description": [
        {
          "name": "@description",
          "body": "Destructor"
        }
      ]
    }
  },
  "members": {
    "__p": {
      "location": {
        "start": {
          "line": 119,
          "column": 4
        },
        "end": {
          "line": 119,
          "column": 13
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "The Promise"
          }
        ]
      },
      "type": "variable",
      "access": "private"
    },
    "__external": {
      "location": {
        "start": {
          "line": 122,
          "column": 4
        },
        "end": {
          "line": 122,
          "column": 20
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Stores data for completing the promise externally"
          }
        ]
      },
      "type": "variable",
      "access": "private"
    },
    "then": {
      "location": {
        "start": {
          "line": 142,
          "column": 4
        },
        "end": {
          "line": 144,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "********************************************************************************\n\nPromise API methods"
          },
          {
            "name": "@description",
            "body": "Returns a promise which is determined by the functions <code>onFulfilled</code>\nand <code>onRejected</code>."
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "onFulfilled {Function} called when the Promise is fulfilled. This function\nhas one argument, the fulfillment value.",
            "paramName": "onFulfilled",
            "description": " called when the Promise is fulfilled. This function\nhas one argument, the fulfillment value.",
            "type": "Function"
          },
          {
            "name": "@param",
            "body": "onRejected {Function?} called when the Promise is rejected. This function\nhas one argument, the rejection reason.",
            "paramName": "onRejected",
            "description": " called when the Promise is rejected. This function\nhas one argument, the rejection reason.",
            "optional": true,
            "type": "Function"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{qx.Promise}",
            "type": "qx.Promise",
            "description": ""
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "catch": {
      "location": {
        "start": {
          "line": 156,
          "column": 4
        },
        "end": {
          "line": 158,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Appends a rejection handler callback to the promise, and returns a new promise\nresolving to the return value of the callback if it is called, or to its original\nfulfillment value if the promise is instead fulfilled."
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "onRejected {Function?} called when the Promise is rejected. This function\nhas one argument, the rejection reason.",
            "paramName": "onRejected",
            "description": " called when the Promise is rejected. This function\nhas one argument, the rejection reason.",
            "optional": true,
            "type": "Function"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{qx.Promise} a qx.Promise is rejected if onRejected throws an error or\nreturns a Promise which is itself rejected; otherwise, it is resolved.",
            "type": "qx.Promise",
            "description": " a qx.Promise is rejected if onRejected throws an error or\nreturns a Promise which is itself rejected; otherwise, it is resolved."
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "bind": {
      "location": {
        "start": {
          "line": 174,
          "column": 4
        },
        "end": {
          "line": 176,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "********************************************************************************\n\nExtension Promise methods"
          },
          {
            "name": "@description",
            "body": "Creates a new qx.Promise with the 'this' set to a different context"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "context {Object} the 'this' context for the new Promise",
            "paramName": "context",
            "description": " the 'this' context for the new Promise",
            "type": "Object"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{qx.Promise} the new promise",
            "type": "qx.Promise",
            "description": " the new promise"
          }
        ]
      },
      "type": "function",
      "access": "public",
      "overriddenFrom": "qx.core.Object",
      "appearsIn": [
        "qx.core.Object",
        "qx.data.MBinding"
      ]
    },
    "spread": {
      "location": {
        "start": {
          "line": 200,
          "column": 4
        },
        "end": {
          "line": 202,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Like calling <code>.then</code>, but the fulfillment value must be an array, which is flattened\nto the formal parameters of the fulfillment handler.\n\nFor example:\n<pre>\nqx.Promise.all([\nfs.readFileAsync(\"file1.txt\"),\nfs.readFileAsync(\"file2.txt\")\n]).spread(function(file1text, file2text) {\nif (file1text === file2text) {\nconsole.log(\"files are equal\");\n}\nelse {\nconsole.log(\"files are not equal\");\n}\n});\n</pre>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "fulfilledHandler {Function} called when the Promises are fulfilled.",
            "paramName": "fulfilledHandler",
            "description": " called when the Promises are fulfilled.",
            "type": "Function"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{qx.Promise}",
            "type": "qx.Promise",
            "description": ""
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "finally": {
      "location": {
        "start": {
          "line": 212,
          "column": 4
        },
        "end": {
          "line": 214,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Appends a handler that will be called regardless of this promise's fate. The handler\nis not allowed to modify the value of the promise"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "handler {Function?} called when the Promise is fulfilled or rejected. This function\nhas no arguments, but can return a promise",
            "paramName": "handler",
            "description": " called when the Promise is fulfilled or rejected. This function\nhas no arguments, but can return a promise",
            "optional": true,
            "type": "Function"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{qx.Promise} a qx.Promise chained from this promise",
            "type": "qx.Promise",
            "description": " a qx.Promise chained from this promise"
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "cancel": {
      "location": {
        "start": {
          "line": 219,
          "column": 4
        },
        "end": {
          "line": 221,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Cancel this promise. Will not do anything if this promise is already settled."
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "all": {
      "location": {
        "start": {
          "line": 231,
          "column": 4
        },
        "end": {
          "line": 233,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Same as {@link qx.Promise.all} except that it iterates over the value of this promise, when\nit is fulfilled; for example, if this Promise resolves to an Iterable (eg an Array),\n<code>.all</code> will return a Promise that waits for all promises in that Iterable to be\nfullfilled.  The Iterable can be a mix of values and Promises"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{qx.Promise}",
            "type": "qx.Promise",
            "description": ""
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "race": {
      "location": {
        "start": {
          "line": 243,
          "column": 4
        },
        "end": {
          "line": 245,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Same as {@link qx.Promise.race} except that it iterates over the value of this promise, when\nit is fulfilled; for example, if this Promise resolves to an Iterable (eg an Array),\n<code>.race</code> will return a Promise that waits until the first promise in that Iterable\nhas been fullfilled.  The Iterable can be a mix of values and Promises"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{qx.Promise}",
            "type": "qx.Promise",
            "description": ""
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "any": {
      "location": {
        "start": {
          "line": 254,
          "column": 4
        },
        "end": {
          "line": 256,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Same as {@link qx.Promise.some} except that it iterates over the value of this promise, when\nit is fulfilled.  Like <code>some</code>, with 1 as count. However, if the promise fulfills,\nthe fulfillment value is not an array of 1 but the value directly."
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{qx.Promise}",
            "type": "qx.Promise",
            "description": ""
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "some": {
      "location": {
        "start": {
          "line": 267,
          "column": 4
        },
        "end": {
          "line": 269,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Same as {@link qx.Promise.some} except that it iterates over the value of this promise, when\nit is fulfilled; return a promise that is fulfilled as soon as count promises are fulfilled\nin the array. The fulfillment value is an array with count values in the order they were fulfilled."
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "iterable {Iterable} An iterable object, such as an Array",
            "paramName": "iterable",
            "description": " An iterable object, such as an Array",
            "type": "Iterable"
          },
          {
            "name": "@param",
            "body": "count {Integer}"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{qx.Promise}",
            "type": "qx.Promise",
            "description": ""
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "forEach": {
      "location": {
        "start": {
          "line": 285,
          "column": 4
        },
        "end": {
          "line": 287,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Same as {@link qx.Promise.forEach} except that it iterates over the value of this promise, when\nit is fulfilled; iterates over the values with the given <code>iterator</code> function with the signature\n<code>(value, index, length)</code> where <code>value</code> is the resolved value. Iteration happens\nserially. If any promise is rejected the returned promise is rejected as well.\n\nResolves to the original array unmodified, this method is meant to be used for side effects. If the iterator\nfunction returns a promise or a thenable, then the result of the promise is awaited, before continuing with\nnext iteration."
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "iterable {Iterable} An iterable object, such as an Array",
            "paramName": "iterable",
            "description": " An iterable object, such as an Array",
            "type": "Iterable"
          },
          {
            "name": "@param",
            "body": "iterator {Function} the callback, with <code>(value, index, length)</code>",
            "paramName": "iterator",
            "description": " the callback, with <code>(value, index, length)</code>",
            "type": "Function"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{qx.Promise}",
            "type": "qx.Promise",
            "description": ""
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "filter": {
      "location": {
        "start": {
          "line": 299,
          "column": 4
        },
        "end": {
          "line": 301,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Same as {@link qx.Promise.filter} except that it iterates over the value of this promise, when it is fulfilled;\niterates over all the values into an array and filter the array to another using the given filterer function."
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "iterable {Iterable} An iterable object, such as an Array",
            "paramName": "iterable",
            "description": " An iterable object, such as an Array",
            "type": "Iterable"
          },
          {
            "name": "@param",
            "body": "iterator {Function} the callback, with <code>(value, index, length)</code>",
            "paramName": "iterator",
            "description": " the callback, with <code>(value, index, length)</code>",
            "type": "Function"
          },
          {
            "name": "@param",
            "body": "options {Object?} options; can be:\n<code>concurrency</code> max nuber of simultaneous filters, default is <code>Infinity</code>",
            "paramName": "options",
            "description": " options; can be:\n<code>concurrency</code> max nuber of simultaneous filters, default is <code>Infinity</code>",
            "optional": true,
            "type": "Object"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{qx.Promise}",
            "type": "qx.Promise",
            "description": ""
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "map": {
      "location": {
        "start": {
          "line": 322,
          "column": 4
        },
        "end": {
          "line": 324,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Same as {@link qx.Promise.map} except that it iterates over the value of this promise, when it is fulfilled;\niterates over all the values into an array and map the array to another using the given mapper function.\n\nPromises returned by the mapper function are awaited for and the returned promise doesn't fulfill\nuntil all mapped promises have fulfilled as well. If any promise in the array is rejected, or\nany promise returned by the mapper function is rejected, the returned promise is rejected as well.\n\nThe mapper function for a given item is called as soon as possible, that is, when the promise\nfor that item's index in the input array is fulfilled. This doesn't mean that the result array\nhas items in random order, it means that .map can be used for concurrency coordination unlike\n.all."
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "iterable {Iterable} An iterable object, such as an Array",
            "paramName": "iterable",
            "description": " An iterable object, such as an Array",
            "type": "Iterable"
          },
          {
            "name": "@param",
            "body": "iterator {Function} the callback, with <code>(value, index, length)</code>",
            "paramName": "iterator",
            "description": " the callback, with <code>(value, index, length)</code>",
            "type": "Function"
          },
          {
            "name": "@param",
            "body": "options {Object?} options; can be:\n<code>concurrency</code> max nuber of simultaneous filters, default is <code>Infinity</code>",
            "paramName": "options",
            "description": " options; can be:\n<code>concurrency</code> max nuber of simultaneous filters, default is <code>Infinity</code>",
            "optional": true,
            "type": "Object"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{qx.Promise}",
            "type": "qx.Promise",
            "description": ""
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "mapSeries": {
      "location": {
        "start": {
          "line": 343,
          "column": 4
        },
        "end": {
          "line": 345,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Same as {@link qx.Promise.mapSeries} except that it iterates over the value of this promise, when\nit is fulfilled; iterates over all the values into an array and iterate over the array serially,\nin-order.\n\nReturns a promise for an array that contains the values returned by the iterator function in their\nrespective positions. The iterator won't be called for an item until its previous item, and the\npromise returned by the iterator for that item are fulfilled. This results in a mapSeries kind of\nutility but it can also be used simply as a side effect iterator similar to Array#forEach.\n\nIf any promise in the input array is rejected or any promise returned by the iterator function is\nrejected, the result will be rejected as well."
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "iterable {Iterable} An iterable object, such as an Array",
            "paramName": "iterable",
            "description": " An iterable object, such as an Array",
            "type": "Iterable"
          },
          {
            "name": "@param",
            "body": "iterator {Function} the callback, with <code>(value, index, length)</code>",
            "paramName": "iterator",
            "description": " the callback, with <code>(value, index, length)</code>",
            "type": "Function"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{qx.Promise}",
            "type": "qx.Promise",
            "description": ""
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "reduce": {
      "location": {
        "start": {
          "line": 369,
          "column": 4
        },
        "end": {
          "line": 371,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Same as {@link qx.Promise.reduce} except that it iterates over the value of this promise, when\nit is fulfilled; iterates over all the values in the <code>Iterable</code> into an array and\nreduce the array to a value using the given reducer function.\n\nIf the reducer function returns a promise, then the result of the promise is awaited, before\ncontinuing with next iteration. If any promise in the array is rejected or a promise returned\nby the reducer function is rejected, the result is rejected as well.\n\nIf initialValue is undefined (or a promise that resolves to undefined) and the iterable contains\nonly 1 item, the callback will not be called and the iterable's single item is returned. If the\niterable is empty, the callback will not be called and initialValue is returned (which may be\nundefined).\n\nqx.Promise.reduce will start calling the reducer as soon as possible, this is why you might want to\nuse it over qx.Promise.all (which awaits for the entire array before you can call Array#reduce on it)."
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "iterable {Iterable} An iterable object, such as an Array",
            "paramName": "iterable",
            "description": " An iterable object, such as an Array",
            "type": "Iterable"
          },
          {
            "name": "@param",
            "body": "reducer {Function} the callback, with <code>(value, index, length)</code>",
            "paramName": "reducer",
            "description": " the callback, with <code>(value, index, length)</code>",
            "type": "Function"
          },
          {
            "name": "@param",
            "body": "initialValue {Object?} optional initial value",
            "paramName": "initialValue",
            "description": " optional initial value",
            "optional": true,
            "type": "Object"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{qx.Promise}",
            "type": "qx.Promise",
            "description": ""
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "__externalPromise": {
      "location": {
        "start": {
          "line": 376,
          "column": 4
        },
        "end": {
          "line": 378,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "External promise handler"
          }
        ]
      },
      "type": "function",
      "access": "private"
    },
    "__getPendingExternal": {
      "location": {
        "start": {
          "line": 383,
          "column": 4
        },
        "end": {
          "line": 392,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Returns the data stored by __externalPromise, throws an exception once processed"
          }
        ]
      },
      "type": "function",
      "access": "private"
    },
    "resolve": {
      "location": {
        "start": {
          "line": 397,
          "column": 4
        },
        "end": {
          "line": 399,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Resolves an external promise"
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "reject": {
      "location": {
        "start": {
          "line": 404,
          "column": 4
        },
        "end": {
          "line": 406,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Rejects an external promise"
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "_callIterableMethod": {
      "location": {
        "start": {
          "line": 421,
          "column": 4
        },
        "end": {
          "line": 427,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "********************************************************************************\n\nUtility methods"
          },
          {
            "name": "@description",
            "body": "Helper method used to call Promise methods which iterate over an array"
          }
        ]
      },
      "type": "function",
      "access": "protected"
    },
    "_callMethod": {
      "location": {
        "start": {
          "line": 432,
          "column": 4
        },
        "end": {
          "line": 435,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Helper method used to call a Promise method"
          }
        ]
      },
      "type": "function",
      "access": "protected"
    },
    "toPromise": {
      "location": {
        "start": {
          "line": 447,
          "column": 4
        },
        "end": {
          "line": 449,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Returns the actual Promise implementation.\n\nNote that Bluebird is the current implementation, and may change without\nnotice in the future; if you use this API you accept that this is a private\nimplementation detail exposed for debugging or diagnosis purposes only.  For\nthis reason, the toPromise() method is listed as deprecated starting from the\nfirst release"
          }
        ],
        "@deprecated": [
          {
            "name": "@deprecated",
            "body": "{6.0} this API method is subject to change"
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "getQxOwner": {
      "type": "function",
      "name": "getQxOwner",
      "abstract": false,
      "mixin": false,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.core.Object",
      "property": "get",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Gets the (computed) value of the property <code>qxOwner</code>.\n\nFor further details take a look at the property definition: {@link #qxOwner}."
          }
        ],
        "@return": [
          {
            "name": "@return",
            "type": "qx.core.Object",
            "desc": "Returns the value for qxOwner"
          }
        ]
      }
    },
    "setQxOwner": {
      "type": "function",
      "name": "setQxOwner",
      "abstract": false,
      "mixin": false,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.core.Object",
      "property": "set",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Sets the user value of the property <code>qxOwner</code>.\n\nFor further details take a look at the property definition: {@link #qxOwner}."
          }
        ],
        "@param": [
          {
            "name": "@param",
            "type": "qx.core.Object",
            "paramName": "value",
            "desc": "Value for qxOwner"
          }
        ]
      }
    },
    "resetQxOwner": {
      "type": "function",
      "name": "resetQxOwner",
      "abstract": false,
      "mixin": false,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.core.Object",
      "property": "reset"
    },
    "getQxObjectId": {
      "type": "function",
      "name": "getQxObjectId",
      "abstract": false,
      "mixin": false,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.core.Object",
      "property": "get",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Gets the (computed) value of the property <code>qxObjectId</code>.\n\nFor further details take a look at the property definition: {@link #qxObjectId}."
          }
        ],
        "@return": [
          {
            "name": "@return",
            "desc": "Returns the value for qxObjectId"
          }
        ]
      }
    },
    "setQxObjectId": {
      "type": "function",
      "name": "setQxObjectId",
      "abstract": false,
      "mixin": false,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.core.Object",
      "property": "set",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Sets the user value of the property <code>qxObjectId</code>.\n\nFor further details take a look at the property definition: {@link #qxObjectId}."
          }
        ],
        "@param": [
          {
            "name": "@param",
            "paramName": "value",
            "desc": "Value for qxObjectId"
          }
        ]
      }
    },
    "resetQxObjectId": {
      "type": "function",
      "name": "resetQxObjectId",
      "abstract": false,
      "mixin": false,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.core.Object",
      "property": "reset"
    }
  },
  "statics": {
    "Bluebird": {
      "location": {
        "start": {
          "line": 455,
          "column": 4
        },
        "end": {
          "line": 455,
          "column": 18
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Bluebird Promise library; always available"
          }
        ]
      },
      "type": "variable",
      "access": "public"
    },
    "Native": {
      "location": {
        "start": {
          "line": 458,
          "column": 4
        },
        "end": {
          "line": 458,
          "column": 16
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Native Promise library; only available if the browser supports it"
          }
        ]
      },
      "type": "variable",
      "access": "public"
    },
    "Promise": {
      "location": {
        "start": {
          "line": 461,
          "column": 4
        },
        "end": {
          "line": 461,
          "column": 17
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Promise library, either the Native one or a Polyfill; reliable choice for native Promises"
          }
        ]
      },
      "type": "variable",
      "access": "public"
    },
    "__DEFAULT_ERROR": {
      "location": {
        "start": {
          "line": 466,
          "column": 4
        },
        "end": {
          "line": 466,
          "column": 47
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "This is used to suppress warnings about rejections without an Error object, only used if\nthe reason is undefined"
          }
        ]
      },
      "type": "variable",
      "access": "private"
    },
    "resolve": {
      "location": {
        "start": {
          "line": 486,
          "column": 4
        },
        "end": {
          "line": 497,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "********************************************************************************\n\nPromise API methods"
          },
          {
            "name": "@description",
            "body": "Returns a Promise object that is resolved with the given value. If the value is a thenable (i.e.\nhas a then method), the returned promise will \"follow\" that thenable, adopting its eventual\nstate; otherwise the returned promise will be fulfilled with the value. Generally, if you\ndon't know if a value is a promise or not, Promise.resolve(value) it instead and work with\nthe return value as a promise."
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "value {Object}"
          },
          {
            "name": "@param",
            "body": "context {Object?} optional context for callbacks to be bound to",
            "paramName": "context",
            "description": " optional context for callbacks to be bound to",
            "optional": true,
            "type": "Object"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{qx.Promise}",
            "type": "qx.Promise",
            "description": ""
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "reject": {
      "location": {
        "start": {
          "line": 505,
          "column": 4
        },
        "end": {
          "line": 518,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Returns a Promise object that is rejected with the given reason."
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "reason {Object?} Reason why this Promise rejected. A warning is generated if not instanceof Error. If undefined, a default Error is used.",
            "paramName": "reason",
            "description": " Reason why this Promise rejected. A warning is generated if not instanceof Error. If undefined, a default Error is used.",
            "optional": true,
            "type": "Object"
          },
          {
            "name": "@param",
            "body": "context {Object?} optional context for callbacks to be bound to",
            "paramName": "context",
            "description": " optional context for callbacks to be bound to",
            "optional": true,
            "type": "Object"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{qx.Promise}",
            "type": "qx.Promise",
            "description": ""
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "allOf": {
      "location": {
        "start": {
          "line": 528,
          "column": 4
        },
        "end": {
          "line": 547,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Returns a promise that resolves when all of the promises in the object properties have resolved,\nor rejects with the reason of the first passed promise that rejects.  The result of each property\nis placed back in the object, replacing the promise.  Note that non-promise values are untouched."
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "value {var} An object",
            "paramName": "value",
            "description": " An object",
            "type": "var"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{qx.Promise}",
            "type": "qx.Promise",
            "description": ""
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "all": {
      "location": {
        "start": {
          "line": 557,
          "column": 4
        },
        "end": {
          "line": 559,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Returns a promise that resolves when all of the promises in the iterable argument have resolved,\nor rejects with the reason of the first passed promise that rejects.  Note that non-promise values\nare untouched."
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "iterable {Iterable} An iterable object, such as an Array",
            "paramName": "iterable",
            "description": " An iterable object, such as an Array",
            "type": "Iterable"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{qx.Promise}",
            "type": "qx.Promise",
            "description": ""
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "race": {
      "location": {
        "start": {
          "line": 567,
          "column": 4
        },
        "end": {
          "line": 569,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Returns a promise that resolves or rejects as soon as one of the promises in the iterable resolves\nor rejects, with the value or reason from that promise."
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "iterable {Iterable} An iterable object, such as an Array",
            "paramName": "iterable",
            "description": " An iterable object, such as an Array",
            "type": "Iterable"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{qx.Promise}",
            "type": "qx.Promise",
            "description": ""
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "any": {
      "location": {
        "start": {
          "line": 586,
          "column": 4
        },
        "end": {
          "line": 588,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "********************************************************************************\n\nExtension API methods"
          },
          {
            "name": "@description",
            "body": "Like Promise.some, with 1 as count. However, if the promise fulfills, the fulfillment value is not an\narray of 1 but the value directly."
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "iterable {Iterable} An iterable object, such as an Array",
            "paramName": "iterable",
            "description": " An iterable object, such as an Array",
            "type": "Iterable"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{qx.Promise}",
            "type": "qx.Promise",
            "description": ""
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "some": {
      "location": {
        "start": {
          "line": 600,
          "column": 4
        },
        "end": {
          "line": 602,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Given an Iterable (arrays are Iterable), or a promise of an Iterable, which produces promises (or a mix\nof promises and values), iterate over all the values in the Iterable into an array and return a promise\nthat is fulfilled as soon as count promises are fulfilled in the array. The fulfillment value is an\narray with count values in the order they were fulfilled."
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "iterable {Iterable} An iterable object, such as an Array",
            "paramName": "iterable",
            "description": " An iterable object, such as an Array",
            "type": "Iterable"
          },
          {
            "name": "@param",
            "body": "count {Integer}"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{qx.Promise}",
            "type": "qx.Promise",
            "description": ""
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "forEach": {
      "location": {
        "start": {
          "line": 618,
          "column": 4
        },
        "end": {
          "line": 620,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Iterate over an array, or a promise of an array, which contains promises (or a mix of promises and values)\nwith the given <code>iterator</code> function with the signature <code>(value, index, length)</code> where\n<code>value</code> is the resolved value of a respective promise in the input array. Iteration happens\nserially. If any promise in the input array is rejected the returned promise is rejected as well.\n\nResolves to the original array unmodified, this method is meant to be used for side effects. If the iterator\nfunction returns a promise or a thenable, then the result of the promise is awaited, before continuing with\nnext iteration."
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "iterable {Iterable} An iterable object, such as an Array",
            "paramName": "iterable",
            "description": " An iterable object, such as an Array",
            "type": "Iterable"
          },
          {
            "name": "@param",
            "body": "iterator {Function} the callback, with <code>(value, index, length)</code>",
            "paramName": "iterator",
            "description": " the callback, with <code>(value, index, length)</code>",
            "type": "Function"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{qx.Promise}",
            "type": "qx.Promise",
            "description": ""
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "filter": {
      "location": {
        "start": {
          "line": 646,
          "column": 4
        },
        "end": {
          "line": 648,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Given an Iterable(arrays are Iterable), or a promise of an Iterable, which produces promises (or a mix of\npromises and values), iterate over all the values in the Iterable into an array and filter the array to\nanother using the given filterer function.\n\nIt is essentially an efficient shortcut for doing a .map and then Array#filter:\n<pre>\nqx.Promise.map(valuesToBeFiltered, function(value, index, length) {\nreturn Promise.all([filterer(value, index, length), value]);\n}).then(function(values) {\nreturn values.filter(function(stuff) {\nreturn stuff[0] == true\n}).map(function(stuff) {\nreturn stuff[1];\n});\n});\n</pre>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "iterable {Iterable} An iterable object, such as an Array",
            "paramName": "iterable",
            "description": " An iterable object, such as an Array",
            "type": "Iterable"
          },
          {
            "name": "@param",
            "body": "iterator {Function} the callback, with <code>(value, index, length)</code>",
            "paramName": "iterator",
            "description": " the callback, with <code>(value, index, length)</code>",
            "type": "Function"
          },
          {
            "name": "@param",
            "body": "options {Object?} options; can be:\n<code>concurrency</code> max nuber of simultaneous filters, default is <code>Infinity</code>",
            "paramName": "options",
            "description": " options; can be:\n<code>concurrency</code> max nuber of simultaneous filters, default is <code>Infinity</code>",
            "optional": true,
            "type": "Object"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{qx.Promise}",
            "type": "qx.Promise",
            "description": ""
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "map": {
      "location": {
        "start": {
          "line": 691,
          "column": 4
        },
        "end": {
          "line": 693,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Given an <code>Iterable</code> (arrays are <code>Iterable</code>), or a promise of an\n<code>Iterable</code>, which produces promises (or a mix of promises and values), iterate over\nall the values in the <code>Iterable</code> into an array and map the array to another using\nthe given mapper function.\n\nPromises returned by the mapper function are awaited for and the returned promise doesn't fulfill\nuntil all mapped promises have fulfilled as well. If any promise in the array is rejected, or\nany promise returned by the mapper function is rejected, the returned promise is rejected as well.\n\nThe mapper function for a given item is called as soon as possible, that is, when the promise\nfor that item's index in the input array is fulfilled. This doesn't mean that the result array\nhas items in random order, it means that .map can be used for concurrency coordination unlike\n.all.\n\nA common use of Promise.map is to replace the .push+Promise.all boilerplate:\n\n<pre>\nvar promises = [];\nfor (var i = 0; i < fileNames.length; ++i) {\npromises.push(fs.readFileAsync(fileNames[i]));\n}\nqx.Promise.all(promises).then(function() {\nconsole.log(\"done\");\n});\n\n// Using Promise.map:\nqx.Promise.map(fileNames, function(fileName) {\n// Promise.map awaits for returned promises as well.\nreturn fs.readFileAsync(fileName);\n}).then(function() {\nconsole.log(\"done\");\n});\n</pre>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "iterable {Iterable} An iterable object, such as an Array",
            "paramName": "iterable",
            "description": " An iterable object, such as an Array",
            "type": "Iterable"
          },
          {
            "name": "@param",
            "body": "iterator {Function} the callback, with <code>(value, index, length)</code>",
            "paramName": "iterator",
            "description": " the callback, with <code>(value, index, length)</code>",
            "type": "Function"
          },
          {
            "name": "@param",
            "body": "options {Object?} options; can be:\n<code>concurrency</code> max nuber of simultaneous filters, default is <code>Infinity</code>",
            "paramName": "options",
            "description": " options; can be:\n<code>concurrency</code> max nuber of simultaneous filters, default is <code>Infinity</code>",
            "optional": true,
            "type": "Object"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{qx.Promise}",
            "type": "qx.Promise",
            "description": ""
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "mapSeries": {
      "location": {
        "start": {
          "line": 730,
          "column": 4
        },
        "end": {
          "line": 732,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Given an <code>Iterable</code>(arrays are <code>Iterable</code>), or a promise of an\n<code>Iterable</code>, which produces promises (or a mix of promises and values), iterate over\nall the values in the <code>Iterable</code> into an array and iterate over the array serially,\nin-order.\n\nReturns a promise for an array that contains the values returned by the iterator function in their\nrespective positions. The iterator won't be called for an item until its previous item, and the\npromise returned by the iterator for that item are fulfilled. This results in a mapSeries kind of\nutility but it can also be used simply as a side effect iterator similar to Array#forEach.\n\nIf any promise in the input array is rejected or any promise returned by the iterator function is\nrejected, the result will be rejected as well.\n\nExample where .mapSeries(the instance method) is used for iterating with side effects:\n\n<pre>\n// Source: http://jakearchibald.com/2014/es7-async-functions/\nfunction loadStory() {\nreturn getJSON('story.json')\n.then(function(story) {\naddHtmlToPage(story.heading);\nreturn story.chapterURLs.map(getJSON);\n})\n.mapSeries(function(chapter) { addHtmlToPage(chapter.html); })\n.then(function() { addTextToPage(\"All done\"); })\n.catch(function(err) { addTextToPage(\"Argh, broken: \" + err.message); })\n.then(function() { document.querySelector('.spinner').style.display = 'none'; });\n}\n</pre>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "iterable {Iterable} An iterable object, such as an Array",
            "paramName": "iterable",
            "description": " An iterable object, such as an Array",
            "type": "Iterable"
          },
          {
            "name": "@param",
            "body": "iterator {Function} the callback, with <code>(value, index, length)</code>",
            "paramName": "iterator",
            "description": " the callback, with <code>(value, index, length)</code>",
            "type": "Function"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{qx.Promise}",
            "type": "qx.Promise",
            "description": ""
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "reduce": {
      "location": {
        "start": {
          "line": 770,
          "column": 4
        },
        "end": {
          "line": 772,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Given an <code>Iterable</code> (arrays are <code>Iterable</code>), or a promise of an\n<code>Iterable</code>, which produces promises (or a mix of promises and values), iterate\nover all the values in the <code>Iterable</code> into an array and reduce the array to a\nvalue using the given reducer function.\n\nIf the reducer function returns a promise, then the result of the promise is awaited, before\ncontinuing with next iteration. If any promise in the array is rejected or a promise returned\nby the reducer function is rejected, the result is rejected as well.\n\nRead given files sequentially while summing their contents as an integer. Each file contains\njust the text 10.\n\n<pre>\nqx.Promise.reduce([\"file1.txt\", \"file2.txt\", \"file3.txt\"], function(total, fileName) {\nreturn fs.readFileAsync(fileName, \"utf8\").then(function(contents) {\nreturn total + parseInt(contents, 10);\n});\n}, 0).then(function(total) {\n//Total is 30\n});\n</pre>\n\nIf initialValue is undefined (or a promise that resolves to undefined) and the iterable contains\nonly 1 item, the callback will not be called and the iterable's single item is returned. If the\niterable is empty, the callback will not be called and initialValue is returned (which may be\nundefined).\n\nPromise.reduce will start calling the reducer as soon as possible, this is why you might want to\nuse it over Promise.all (which awaits for the entire array before you can call Array#reduce on it)."
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "iterable {Iterable} An iterable object, such as an Array",
            "paramName": "iterable",
            "description": " An iterable object, such as an Array",
            "type": "Iterable"
          },
          {
            "name": "@param",
            "body": "reducer {Function} the callback, with <code>(value, index, length)</code>",
            "paramName": "reducer",
            "description": " the callback, with <code>(value, index, length)</code>",
            "type": "Function"
          },
          {
            "name": "@param",
            "body": "initialValue {Object?} optional initial value",
            "paramName": "initialValue",
            "description": " optional initial value",
            "optional": true,
            "type": "Object"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{qx.Promise}",
            "type": "qx.Promise",
            "description": ""
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "method": {
      "location": {
        "start": {
          "line": 780,
          "column": 4
        },
        "end": {
          "line": 785,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Returns a new function that wraps the given function fn. The new function will always return a promise that is\nfulfilled with the original functions return values or rejected with thrown exceptions from the original function."
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "cb {Function}"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{Function}",
            "type": "Function",
            "description": ""
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "props": {
      "location": {
        "start": {
          "line": 801,
          "column": 4
        },
        "end": {
          "line": 803,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Like .all but for object properties or Maps* entries instead of iterated values. Returns a promise that\nis fulfilled when all the properties of the object or the Map's' values** are fulfilled. The promise's\nfulfillment value is an object or a Map with fulfillment values at respective keys to the original object\nor a Map. If any promise in the object or Map rejects, the returned promise is rejected with the rejection\nreason.\n\nIf object is a trusted Promise, then it will be treated as a promise for object rather than for its\nproperties. All other objects (except Maps) are treated for their properties as is returned by\nObject.keys - the object's own enumerable properties."
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "input {Object} An Object",
            "paramName": "input",
            "description": " An Object",
            "type": "Object"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{qx.Promise}",
            "type": "qx.Promise",
            "description": ""
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "promisify": {
      "location": {
        "start": {
          "line": 859,
          "column": 4
        },
        "end": {
          "line": 861,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Returns a new function that wraps a function that is in node.js\nstyle. The resulting function returns a promise instead of taking a\ncallback function as an argument. The promise is resolved or rejected\nby the action of the callback function. The provided function must\naccept a callback as its last argument, and that callback function must\nexpect its first argument to be an error if non-null. If the first\nargument is null, the second argument (optional) will be the success\nvalue.\n\nExample:\n\nAssume there is a member method in myApp.Application such as the\nfollowing:\n<pre><code>\nissueRpc : function(method, params, callback)\n{\n...\n}\n</code></pre>\n\nwhere the signature of <code>callback</code> is:\n<pre><code>\nfunction callback(e, result)\n</code></pre>\n\nThe <code>issueRpc</code>method could be converted to be called using\npromises instead of callbacks, as shown here:\n<pre><code>\nvar app = qx.core.Init.getApplication();\nvar rpc = qx.Promise.promisify(app.issueRpc, { context : app });\nrpc(\"ping\", [ \"hello world\" ])\n.then(\nfunction(pongValue)\n{\n// handle result\n})\n.catch(\nfunction(e)\n{\nthrow e;\n});\n</code></pre>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "f {Function} The node.js-style function to be promisified",
            "paramName": "f",
            "description": " The node.js-style function to be promisified",
            "type": "Function"
          },
          {
            "name": "@param",
            "body": "options {Map?}\nThe sole user option in this map is <code>context</code>, which may\nbe specified to arrange for the provided callback function to be\ncalled in the specified context.",
            "paramName": "options",
            "description": "\nThe sole user option in this map is <code>context</code>, which may\nbe specified to arrange for the provided callback function to be\ncalled in the specified context.",
            "optional": true,
            "type": "Map"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{qx.Promise}",
            "type": "qx.Promise",
            "description": ""
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "__attachBluebird": {
      "location": {
        "start": {
          "line": 875,
          "column": 4
        },
        "end": {
          "line": 882,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "********************************************************************************\n\nInternal API methods"
          },
          {
            "name": "@description",
            "body": "Called when the Bluebird Promise class is loaded"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "Promise {Class} the Promise class",
            "paramName": "Promise",
            "description": " the Promise class",
            "type": "qx.Class"
          }
        ]
      },
      "type": "function",
      "access": "private"
    },
    "__initialized": {
      "location": {
        "start": {
          "line": 885,
          "column": 4
        },
        "end": {
          "line": 885,
          "column": 24
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Whether one-time initialisaton has happened"
          }
        ]
      },
      "type": "variable",
      "access": "private"
    },
    "__initialize": {
      "location": {
        "start": {
          "line": 890,
          "column": 4
        },
        "end": {
          "line": 899,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "One-time initializer"
          }
        ]
      },
      "type": "function",
      "access": "private"
    },
    "__onUnhandledRejection": {
      "location": {
        "start": {
          "line": 905,
          "column": 4
        },
        "end": {
          "line": 917,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Handles unhandled errors and passes them through to Qooxdoo's global error handler"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "e {NativeEvent}"
          }
        ]
      },
      "type": "function",
      "access": "private"
    },
    "__wrap": {
      "location": {
        "start": {
          "line": 924,
          "column": 4
        },
        "end": {
          "line": 933,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Wraps values, converting Promise into qx.Promise"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "value {Object}"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{Object}",
            "type": "Object",
            "description": ""
          }
        ]
      },
      "type": "function",
      "access": "private"
    },
    "__bindArgs": {
      "location": {
        "start": {
          "line": 944,
          "column": 4
        },
        "end": {
          "line": 961,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Binds all functions in the array to the context at the end of the array;\nthe last value must be a qx.core.Object to distinguish itself from configuration\nobjects passed to some methods."
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "args {arguments}"
          },
          {
            "name": "@param",
            "body": "minArgs {Integer?} minimum number of arguments expected for the method call;\nthis is used to determine whether the last value is for binding (default is 1)",
            "paramName": "minArgs",
            "description": " minimum number of arguments expected for the method call;\nthis is used to determine whether the last value is for binding (default is 1)",
            "optional": true,
            "type": "Integer"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{Array} array of new arguments with functions bound as necessary",
            "type": "Array",
            "description": " array of new arguments with functions bound as necessary"
          }
        ]
      },
      "type": "function",
      "access": "private"
    },
    "__callStaticMethod": {
      "location": {
        "start": {
          "line": 970,
          "column": 4
        },
        "end": {
          "line": 973,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Helper method used to call a Bluebird Promise method"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "methodName {String} method name to call",
            "paramName": "methodName",
            "description": " method name to call",
            "type": "String"
          },
          {
            "name": "@param",
            "body": "args {Array} arguments to pass",
            "paramName": "args",
            "description": " arguments to pass",
            "type": "Array"
          },
          {
            "name": "@param",
            "body": "minArgs {Integer?} {@see __bindArgs}",
            "paramName": "minArgs",
            "description": " {@see __bindArgs}",
            "optional": true,
            "type": "Integer"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{Object?}",
            "type": "Object?",
            "description": ""
          }
        ]
      },
      "type": "function",
      "access": "private"
    },
    "__mapArgs": {
      "location": {
        "start": {
          "line": 979,
          "column": 4
        },
        "end": {
          "line": 993,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Maps all arguments ready for passing to a Bluebird function; qx.data.Array are\ntranslated to native arrays and qx.Promise to Promise.  This is not recursive."
          }
        ]
      },
      "type": "function",
      "access": "private"
    }
  },
  "defer": {
    "location": {
      "start": {
        "line": 996,
        "column": 2
      },
      "end": {
        "line": 1001,
        "column": 3
      }
    }
  },
  "descendants": []
}